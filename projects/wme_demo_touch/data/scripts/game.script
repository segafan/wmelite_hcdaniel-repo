#include "scripts\base.inc"
#include "scripts\keys.inc"


if (Game.Platform == "iPhone OS") Game.CursorHidden = true;

// store some of the game's attributes in global variables for convenience
Keyboard = Game.Keyboard;
Scene = Game.Scene;


// load the right-click menu
global WinMenu = Game.LoadWindow("interface\menu\menu.window");
WinMenu.Visible = false;

global WinHud = Game.LoadWindow("interface\system\hud.window");
WinHud.Visible = true;


// load the "caption" window
var win = Game.LoadWindow("interface\system\caption.window");
global WinCaption = win.GetControl("caption");


global MenuObject = null;


// load our main actor
actor = Game.LoadActor("actors\molly\molly.actor");
Game.MainObject = actor;

// run the "game loop" script
Game.AttachScript("scripts\game_loop.script");

// initial items
Game.TakeItem("money");


// which scene to load?
Game.ChangeScene(Game.StartupScene);


global g_IsDragging = false;
global g_DragObject = null;
global g_DragStart = 0;

////////////////////////////////////////////////////////////////////////////////
on "LeftClick"
{
	g_IsDragging = true;
	g_DragObject = Game.ActiveObject;
	g_DragStart = Game.CurrentTime;
}

////////////////////////////////////////////////////////////////////////////////
on "LeftRelease"
{
	if (!g_IsDragging) return;
	
	g_IsDragging = false;

	
  // what did we click?
  var ActObj = Game.ActiveObject;
  if(ActObj!=null)
  {
    // clicking an inventory item
    if(ActObj.Type=="item" && Game.SelectedItem==null)
    {
      SelectItem(ActObj);      
    }
    // using an inventory item on another object
    else if(Game.SelectedItem != null && Game.SelectedItem != ActObj)
    {
    	if (ActObj.Type != "button" && ActObj.Type != "window")
    	{
        var Item = Game.SelectedItem;
        if(ActObj.CanHandleEvent(Item.Name)) ActObj.ApplyEvent(Item.Name);
        else if(Item.CanHandleEvent("default-use")) Item.ApplyEvent("default-use");
        else if(ActObj.CanHandleEvent("default-use")) ActObj.ApplyEvent("default-use");
        else actor.Talk("I can't use these things together.");
      }
    }
    // display menu if the object supports verbs or just apply click
    else if (!DisplayVerbMenu(ActObj)) ActObj.ApplyEvent("LeftClick");
  }
  // else propagate the LeftClick event to a scene
  else
  {
    Scene.ApplyEvent("LeftClick");
  }	
}

////////////////////////////////////////////////////////////////////////////////
method SelectItem(var item)
{
	Game.SelectedItem = item;
	WinHud.DisplayItem(item);
}

////////////////////////////////////////////////////////////////////////////////
method DisplayVerbMenu(var obj)
{
	if (obj == WinMenu) return false; // menu window happens to be able to handle the Take/Talk/LookAt events
	  
	if (obj.CanHandleEvent("Take") || obj.CanHandleEvent("Talk") || obj.CanHandleEvent("LookAt"))
	{
  	// store the clicked object in a global variable MenuObject
  	MenuObject = obj;
  	var Caption = WinMenu.GetControl("caption");
  	Caption.Text = MenuObject.Caption;

  	// adjust menu's position
  	WinMenu.X = Game.MouseX - WinMenu.Width / 2;
  	if(WinMenu.X < 0) WinMenu.X = 0;
  	if(WinMenu.X+WinMenu.Width>Game.ScreenWidth) WinMenu.X = Game.ScreenWidth-WinMenu.Width;

  	WinMenu.Y = Game.MouseY - WinMenu.Height / 2;
  	if(WinMenu.Y<0) WinMenu.Y = 0;
  	if(WinMenu.Y+WinMenu.Height>Game.ScreenHeight) WinMenu.Y = Game.ScreenHeight-WinMenu.Height;

  	// and show the right-click menu
  	WinMenu.Visible = true;

  	// stop the actor from whatever he was going to do
  	actor.Reset();
  	  	
  	return true;
  }
  else return false;
}

////////////////////////////////////////////////////////////////////////////////
method DropItem(itemName)
{
	if (Game.SelectedItem != null)
	{
		var selItem = Game.SelectedItem;
		if (selItem.Name == itemName) SelectItem(null);
	}
	this.DropItem(itemName);
}

////////////////////////////////////////////////////////////////////////////////
method DeleteItem(item)
{
	if (Game.SelectedItem == item) SelectItem(null);
	this.DeleteItem(item);
}

////////////////////////////////////////////////////////////////////////////////
on "Keypress"
{
  // on Esc or F1 key
  if(Keyboard.KeyCode==VK_ESCAPE || Keyboard.KeyCode==VK_F1)
  {
    // load and display the main menu window
    WinCaption.Visible = false;
    var WinMainMenu = Game.LoadWindow("interface\system\mainmenu.window");
    WinMainMenu.Center();
    WinMainMenu.GoSystemExclusive();
    Game.UnloadObject(WinMainMenu);
  }
}


////////////////////////////////////////////////////////////////////////////////
on "QuitGame"
{
  // on Alt+F4 (window close)
  // load and display the quit confirmation window
  WinCaption.Visible = false;
  var WinQuit = Game.LoadWindow("interface\system\quit.window");
  WinQuit.Center();
  WinQuit.GoSystemExclusive();

  // and if the user selected Yes
  if(WinQuit.xResult)
  {
    // quit the game
    Game.QuitGame();
  }
  // otherwise just unload the quit window from memory
  else Game.UnloadObject(WinQuit);
}
